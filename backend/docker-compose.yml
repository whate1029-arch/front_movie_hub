version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: movie-aggregator-db
    environment:
      POSTGRES_DB: movie_aggregator
      POSTGRES_USER: movie_user
      POSTGRES_PASSWORD: movie_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movie_user -d movie_aggregator"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: movie-aggregator-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      target: production
    container_name: movie-aggregator-api
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://movie_user:movie_password@postgres:5432/movie_aggregator
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      OMDB_API_KEY: ${OMDB_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      API_KEY: ${API_KEY:-your-external-api-key}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Backend (alternative to production)
  backend-dev:
    build:
      context: .
      target: development
    container_name: movie-aggregator-api-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://movie_user:movie_password@postgres:5432/movie_aggregator
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      OMDB_API_KEY: ${OMDB_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      API_KEY: ${API_KEY:-your-external-api-key}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - movie-network
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    profiles:
      - development

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: movie-aggregator-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - movie-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  movie-network:
    driver: bridge